# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  visuals(where: VisualWhereInput! = {}, orderBy: [VisualOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VisualWhereUniqueInput): [Visual!]
  visualsCount(where: VisualWhereInput! = {}): Int
  isAdmin: Boolean
  createdAt: DateTime
  liked(where: VisualWhereInput! = {}, orderBy: [VisualOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VisualWhereUniqueInput): [Visual!]
  likedCount(where: VisualWhereInput! = {}): Int
  following(where: FriendshipWhereInput! = {}, orderBy: [FriendshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FriendshipWhereUniqueInput): [Friendship!]
  followingCount(where: FriendshipWhereInput! = {}): Int
  followers(where: FriendshipWhereInput! = {}, orderBy: [FriendshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FriendshipWhereUniqueInput): [Friendship!]
  followersCount(where: FriendshipWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  visuals: VisualManyRelationFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
  liked: VisualManyRelationFilter
  following: FriendshipManyRelationFilter
  followers: FriendshipManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input VisualManyRelationFilter {
  every: VisualWhereInput
  some: VisualWhereInput
  none: VisualWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FriendshipManyRelationFilter {
  every: FriendshipWhereInput
  some: FriendshipWhereInput
  none: FriendshipWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  visuals: VisualRelateToManyForUpdateInput
  isAdmin: Boolean
  createdAt: DateTime
  liked: VisualRelateToManyForUpdateInput
  following: FriendshipRelateToManyForUpdateInput
  followers: FriendshipRelateToManyForUpdateInput
}

input VisualRelateToManyForUpdateInput {
  disconnect: [VisualWhereUniqueInput!]
  set: [VisualWhereUniqueInput!]
  create: [VisualCreateInput!]
  connect: [VisualWhereUniqueInput!]
}

input FriendshipRelateToManyForUpdateInput {
  disconnect: [FriendshipWhereUniqueInput!]
  set: [FriendshipWhereUniqueInput!]
  create: [FriendshipCreateInput!]
  connect: [FriendshipWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  visuals: VisualRelateToManyForCreateInput
  isAdmin: Boolean
  createdAt: DateTime
  liked: VisualRelateToManyForCreateInput
  following: FriendshipRelateToManyForCreateInput
  followers: FriendshipRelateToManyForCreateInput
}

input VisualRelateToManyForCreateInput {
  create: [VisualCreateInput!]
  connect: [VisualWhereUniqueInput!]
}

input FriendshipRelateToManyForCreateInput {
  create: [FriendshipCreateInput!]
  connect: [FriendshipWhereUniqueInput!]
}

type Friendship {
  id: ID!
  requester: User
  recipient: User
  status: String
  createdAt: DateTime
}

input FriendshipWhereUniqueInput {
  id: ID
}

input FriendshipWhereInput {
  AND: [FriendshipWhereInput!]
  OR: [FriendshipWhereInput!]
  NOT: [FriendshipWhereInput!]
  id: IDFilter
  requester: UserWhereInput
  recipient: UserWhereInput
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input FriendshipOrderByInput {
  id: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input FriendshipUpdateInput {
  requester: UserRelateToOneForUpdateInput
  recipient: UserRelateToOneForUpdateInput
  status: String
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input FriendshipUpdateArgs {
  where: FriendshipWhereUniqueInput!
  data: FriendshipUpdateInput!
}

input FriendshipCreateInput {
  requester: UserRelateToOneForCreateInput
  recipient: UserRelateToOneForCreateInput
  status: String
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Visual {
  id: ID!
  title: String
  cover: ImageFieldOutput
  code: FileFieldOutput
  description: String
  author: User
  createdAt: DateTime
  parameters: JSON
  likes(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  likesCount(where: UserWhereInput! = {}): Int
  extensions: JSON
  docs: JSON
  docsVisible: Boolean
  published: Boolean
  editable: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  privacy: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input VisualWhereUniqueInput {
  id: ID
}

input VisualWhereInput {
  AND: [VisualWhereInput!]
  OR: [VisualWhereInput!]
  NOT: [VisualWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
  likes: UserManyRelationFilter
  docsVisible: BooleanFilter
  published: BooleanFilter
  editable: BooleanFilter
  tags: TagManyRelationFilter
  privacy: StringNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input VisualOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  docsVisible: OrderDirection
  published: OrderDirection
  editable: OrderDirection
  privacy: OrderDirection
}

input VisualUpdateInput {
  title: String
  cover: ImageFieldInput
  code: FileFieldInput
  description: String
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  parameters: JSON
  likes: UserRelateToManyForUpdateInput
  extensions: JSON
  docs: JSON
  docsVisible: Boolean
  published: Boolean
  editable: Boolean
  tags: TagRelateToManyForUpdateInput
  privacy: String
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input VisualUpdateArgs {
  where: VisualWhereUniqueInput!
  data: VisualUpdateInput!
}

input VisualCreateInput {
  title: String
  cover: ImageFieldInput
  code: FileFieldInput
  description: String
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  parameters: JSON
  likes: UserRelateToManyForCreateInput
  extensions: JSON
  docs: JSON
  docsVisible: Boolean
  published: Boolean
  editable: Boolean
  tags: TagRelateToManyForCreateInput
  privacy: String
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  label: String
  visuals(where: VisualWhereInput! = {}, orderBy: [VisualOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VisualWhereUniqueInput): [Visual!]
  visualsCount(where: VisualWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  label: StringFilter
  visuals: VisualManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input TagUpdateInput {
  label: String
  visuals: VisualRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  label: String
  visuals: VisualRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFriendship(data: FriendshipCreateInput!): Friendship
  createFriendships(data: [FriendshipCreateInput!]!): [Friendship]
  updateFriendship(where: FriendshipWhereUniqueInput!, data: FriendshipUpdateInput!): Friendship
  updateFriendships(data: [FriendshipUpdateArgs!]!): [Friendship]
  deleteFriendship(where: FriendshipWhereUniqueInput!): Friendship
  deleteFriendships(where: [FriendshipWhereUniqueInput!]!): [Friendship]
  createVisual(data: VisualCreateInput!): Visual
  createVisuals(data: [VisualCreateInput!]!): [Visual]
  updateVisual(where: VisualWhereUniqueInput!, data: VisualUpdateInput!): Visual
  updateVisuals(data: [VisualUpdateArgs!]!): [Visual]
  deleteVisual(where: VisualWhereUniqueInput!): Visual
  deleteVisuals(where: [VisualWhereUniqueInput!]!): [Visual]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  friendships(where: FriendshipWhereInput! = {}, orderBy: [FriendshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FriendshipWhereUniqueInput): [Friendship!]
  friendship(where: FriendshipWhereUniqueInput!): Friendship
  friendshipsCount(where: FriendshipWhereInput! = {}): Int
  visuals(where: VisualWhereInput! = {}, orderBy: [VisualOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VisualWhereUniqueInput): [Visual!]
  visual(where: VisualWhereUniqueInput!): Visual
  visualsCount(where: VisualWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
